name: Docker Build and Deploy

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports: [5432:5432]
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgresql+asyncpg://test_user:test_password@localhost:5432/test_db
      DOCKER_ENV: "false"
      PYTHONUNBUFFERED: "1"
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'
          
      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run tests
        working-directory: ./backend
        run: pytest -v

  build-and-push:
    runs-on: ubuntu-latest
    needs: test # Garante que o build só acontecerá se os testes passarem
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          
      - name: Debug Docker Login
        run: |
          echo "Checking Docker login status..."
          echo "Username used: ${{ secrets.DOCKER_HUB_USERNAME }}"
          docker info

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.prod
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/freeroad-api:latest, ${{ secrets.DOCKER_HUB_USERNAME }}/freeroad-api:${{ github.sha }}

      - name: Trigger Render Deploy
        if: success() && env.RENDER_DEPLOY_HOOK != ''
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
        run: |
          if [ -n "$RENDER_DEPLOY_HOOK" ]; then
            echo "Triggering Render deploy..."
            curl -X POST $RENDER_DEPLOY_HOOK
          else
            echo "RENDER_DEPLOY_HOOK is not configured. Skipping Render deployment."
            echo "To configure: Add your Render deploy hook URL as a secret named RENDER_DEPLOY_HOOK in your GitHub repository."
          fi
